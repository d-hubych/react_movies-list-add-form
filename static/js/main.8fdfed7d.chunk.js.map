{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","required","onChange","onValidation","useState","uniqid","id","touched","setToched","hasError","hasValidError","htmlFor","classNames","type","placeholder","onBlur","NewMovie","onAdd","count","setCount","newMovie","setNewMovie","handleMovie","event","target","handlerSubmit","preventDefault","curent","urlValidator","url","test","invalidUrls","isDisabled","onSubmit","disabled","callbackCopyMovies","App","moviesFromServer","setMovies","copyMovies","push","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8fdfed7d.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState, ChangeEvent } from 'react';\nimport uniqid from 'uniqid';\n\ntype Props = {\n  name: string,\n  value: string,\n  label: string,\n  required?: boolean,\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void,\n  onValidation?: (url: string) => boolean,\n};\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label,\n  required = false,\n  onChange,\n  onValidation,\n}) => {\n  const [id] = useState(uniqid(`${name}-`));\n  const [touched, setToched] = useState(false);\n  const hasError = touched && required && !value;\n  const hasValidError = (onValidation)\n    ? value && !onValidation(value)\n    : false;\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          name={name}\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError,\n          })}\n          type=\"text\"\n          placeholder={`Enter ${label}`}\n          value={value}\n          onChange={onChange}\n          onBlur={() => setToched(true)}\n        />\n      </div>\n\n      {hasError && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n\n      {hasValidError && (\n        <p className=\"help is-danger\">{`${label} is not valid`}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useState, FormEvent, ChangeEvent } from 'react';\nimport { Movie } from '../../types/Movie';\nimport { TextField } from '../TextField';\n\ntype Props = {\n  onAdd: (movie: Movie) => void,\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  const [count, setCount] = useState(0);\n  const [newMovie, setNewMovie] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  const handleMovie = (event: ChangeEvent<HTMLInputElement>) => {\n    setNewMovie({ ...newMovie, [event.target.name]: event.target.value });\n  };\n\n  const clearNewMovie = () => {\n    setNewMovie({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  };\n\n  const handlerSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    onAdd(newMovie);\n    clearNewMovie();\n    setCount((curent) => curent + 1);\n  };\n\n  const urlValidator = (url: string): boolean => {\n    // eslint-disable-next-line\n    const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n    return pattern.test(url);\n  };\n\n  const {\n    title,\n    description,\n    imgUrl,\n    imdbUrl,\n    imdbId,\n  } = newMovie;\n  const invalidUrls = !urlValidator(imgUrl) || !urlValidator(imdbUrl);\n  const isDisabled = !title || !imgUrl || !imdbUrl || !imdbId || invalidUrls;\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={(event => handlerSubmit(event))}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={title}\n        onChange={handleMovie}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={description}\n        onChange={handleMovie}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={imgUrl}\n        onChange={handleMovie}\n        required\n        onValidation={urlValidator}\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={imdbUrl}\n        onChange={handleMovie}\n        required\n        onValidation={urlValidator}\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={imdbId}\n        onChange={handleMovie}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport { Movie } from './types/Movie';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nconst callbackCopyMovies = (movies: Movie[]) => {\n  return movies.map((movie: Movie) => ({ ...movie }));\n};\n\nexport const App = () => {\n  const [movies, setMovies] = useState(callbackCopyMovies(moviesFromServer));\n\n  const handlerNewMovie = (movie: Movie) => {\n    const copyMovies: Movie[] = callbackCopyMovies(movies);\n\n    copyMovies.push(movie);\n\n    setMovies(copyMovies);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={handlerNewMovie} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}